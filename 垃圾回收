1 垃圾回收机制
  
  引用计数算法：给对象添加一个引用计数器，每当有一个地方引用它时，计数器的值就加1，当引用失效时，计数器的值就见1.任何时候计计数器为0的
                对象就是不可能在被使用的。但是很难解决对象之间相互引用的问题
                
  可达性分析算法：通过一系列的称为“GC roots”的对象作为起始点，从这些节点向下搜索，搜索所走过的路径称为引用链，当一个对象到GC roots没有
                  任何引用链相连时，则证明此对象是不用的
                  注：java中可作为GC roots的对象包括下面几种
                    1. 虚拟机栈中引用的对象
                    2. 方法区中类静态属性引用的对象
                    3. 方法区中常量引用的对象
                    4. 本地方法栈中JNI引用的对象
                    
                    
  引用分类：
            1.强引用(Strong Reference)：只要强引用存在，垃圾回收huishou器永远不会回收掉被引用的对象。
            2.弱引用(Soft Reference)：对于软引用关联的对象，在系统将要发生内存溢出异常之前，将会把这些对象列进回收范围之中进行第二次回收
                                      如果这次回收之后还没有足够的内存，才会抛出内存异常。
            3.弱引用(weak Refernece)：当垃圾收集器工作时，无论当前内存是否足够，都会回收掉只被弱引用关联的对象。
            4.虚引用(Phantom Reference)：虚引用不能用来取得一个对象实例，为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收
                                        时收到一个系统通知。
                                        
  finalize方法的作用：一个对象的finalize方法只会执行一次
  
  回收方法区：
            回收常量：没有任何地方引用这个常量
            回收无用的类：该类的所有实例都已经被回收，java堆中不存在任何这个类的实例
                          加载该类的ClassLoader已经被回收
                          该类对应的java.lang.Class对象没有在任何地方被引用，无法在任何地方通过反射访问该类的方法
                                        
  
